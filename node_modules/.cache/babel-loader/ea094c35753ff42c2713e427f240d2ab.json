{"ast":null,"code":"var _jsxFileName = \"/Users/polinamazitova/Documents/GitHub/ADC-Synth-1stModule/app/javascript/prototypes/prototype_20/Container.jsx\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport * as Tone from \"tone\";\nimport React, { Component } from \"react\";\nimport * as bassSettings from \"./tunes/bass.js\";\nimport * as melodySettings from \"./tunes/melody.js\";\nimport * as drumsSettings from \"./tunes/drums.js\";\nimport ToneSynth from \"./modules/ToneSynth.jsx\";\nimport PingPongDelayEffect from \"./modules/PingPongDelayEffect.jsx\";\nimport ChorusEffect from \"./modules/ChorusEffect.jsx\";\nimport Channel from \"./modules/Channel.jsx\";\nimport SC_ToggleButtonSet from \"./components/SC_ToggleButtonSet.jsx\";\nimport SC_ToggleButton from \"./components/SC_ToggleButton\";\nimport SC_Button from \"./components/SC_Button\";\nimport SC_Slider from \"./components/SC_Slider\";\nimport SC_Knob from \"./components/SC_Knob\";\nimport Surface from \"./components/Surface\";\nimport Select from \"./components/Select\";\nvar bassSynth;\nvar bassChorus;\nvar bassPingPongDelay;\nvar bassPart;\nvar melodySynth;\nvar melodyChorus;\nvar melodyPingPongDelay;\nvar melodyPart;\nvar sampler;\nvar samplerChannel;\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.call(this, props);\n\n    _this.shuffle = function (array) {\n      var currentIndex = array.length,\n          randomIndex; // While there remain elements to shuffle.\n\n      while (currentIndex != 0) {\n        // Pick a remaining element.\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--; // And swap it with the current element.\n        // prettier-ignore\n\n        var _ref = [array[randomIndex], array[currentIndex]];\n        array[currentIndex] = _ref[0];\n        array[randomIndex] = _ref[1];\n      }\n\n      return array;\n    };\n\n    _this.handleMelodyChangeMeasureSelectClose = function (e) {\n      console.log(\"close\", e.target.classList[0]);\n\n      if (e.target.classList[0] != \"currentValue\") {\n        _this.setState({\n          melodyChangeMeasureSelect: false\n        });\n      }\n    };\n\n    _this.handleMelodyChangeMeasureSelectOpen = function () {\n      console.log(\"click\");\n\n      _this.setState({\n        melodyChangeMeasureSelect: true\n      });\n    };\n\n    _this.handleMelodyChangeMeasure = function (property, value) {\n      _this.setState({\n        melodyChangeMeasureSelect: false,\n        melodyChangeMeasure: value\n      });\n    };\n\n    _this.handleMelodyChangeRandom = function () {\n      var melodyChangeRandom = _this.state.melodyChangeRandom;\n\n      _this.setState({\n        melodyChangeRandom: !melodyChangeRandom\n      });\n    };\n\n    _this.handleMelodyChange = function () {\n      var melodyChange = _this.state.melodyChange;\n\n      _this.setState({\n        melodyChange: !melodyChange\n      });\n    };\n\n    _this.handleKeydown = function (e) {\n      console.log(e.key, e.code, e.keyCode);\n\n      switch (e.keyCode) {\n        case 49:\n          _this.handleMelodySequenceChange(\"\", \"steps1\");\n\n          break;\n\n        case 50:\n          _this.handleMelodySequenceChange(\"\", \"steps2\");\n\n          break;\n\n        case 81:\n          sampler.triggerAttackRelease(\"A3\", \"1n\");\n          break;\n      }\n    };\n\n    _this.handleStart = function () {\n      var _this$state = _this.state,\n          bassSettings = _this$state.bassSettings,\n          melodySettings = _this$state.melodySettings,\n          drumsSettings = _this$state.drumsSettings; //\n      //\n\n      bassSynth = new Tone.Synth(bassSettings.synth);\n      bassChorus = new Tone.Chorus(bassSettings.chorus).start();\n      bassPingPongDelay = new Tone.PingPongDelay(bassSettings.pingPongDelay).toDestination();\n      bassSynth.chain(bassChorus, bassPingPongDelay);\n      var bassPart = new Tone.Part(function (time, note) {\n        bassSynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, bassSettings.sequence.steps).start(0);\n      bassPart.loopEnd = bassSettings.sequence.duration;\n      bassPart.loop = bassSettings.sequence.loop; //\n      //\n\n      melodySynth = new Tone.Synth(melodySettings.synth);\n      melodyChorus = new Tone.Chorus(melodySettings.chorus).start();\n      melodyPingPongDelay = new Tone.PingPongDelay(melodySettings.pingPongDelay).toDestination();\n      melodySynth.chain(melodyChorus, melodyPingPongDelay);\n      melodyPart = new Tone.Part(function (time, note) {\n        melodySynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, melodySettings.sequence[melodySettings.sequence.current]).start(0);\n      melodyPart.loopEnd = melodySettings.sequence.duration;\n      melodyPart.loop = melodySettings.sequence.loop; //\n      //\n\n      sampler = new Tone.Sampler({\n        urls: {\n          A1: \"shkshkshk.wav\",\n          A2: \"px.wav\",\n          A3: \"pau.mp3\",\n          A4: \"WA_SineDroop_Arp-160-C.wav\",\n          A5: \"WA_Wobbulous_Arp-160-A.wav\",\n          A6: \"WA_Flauter-160-C.wav\",\n          B1: \"klee-ta-ta-ta-and-woo.mp3\"\n        },\n        baseUrl: \"http://localhost:3000/samples/\" // onload: () => {\n        //   sampler.triggerAttackRelease(['A1', 'A2', 'A1', 'A2'], 0.5)\n        // }\n\n      });\n      samplerChannel = new Tone.Channel(drumsSettings.channel).toDestination();\n      sampler.chain(samplerChannel);\n      var drumsPart = new Tone.Part(function (time, note) {\n        sampler.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, drumsSettings.sequence.steps).start(0);\n      drumsPart.loopEnd = drumsSettings.sequence.duration;\n      drumsPart.loop = drumsSettings.sequence.loop;\n\n      _this.handleTransportChange(\"play\", true);\n    };\n\n    _this.nextMeasure = function () {\n      var _this$state2 = _this.state,\n          melodyChangeMeasure = _this$state2.melodyChangeMeasure,\n          melodyChangeRandom = _this$state2.melodyChangeRandom,\n          melodyChange = _this$state2.melodyChange;\n\n      if (melodyChange) {\n        var position = Tone.Transport.position;\n        var regexBefore = /([\\w]+)/;\n        var measure = parseInt(position.match(regexBefore)[1]) + 1;\n        console.log(\"next measure\", measure);\n        var squaresPassed = Math.floor(measure / melodyChangeMeasure);\n\n        if (measure == melodyChangeMeasure || measure - squaresPassed * melodyChangeMeasure == 0) {\n          console.log(\"change\");\n          melodyPart.clear();\n\n          if (melodyChangeRandom) {\n            console.log(\"random\");\n            var notes = [];\n            melodySettings.sequence.steps2.forEach(function (item, i) {\n              notes.push(item.noteName);\n            });\n            notes = _this.shuffle(notes);\n\n            var randomizedSequence = _toConsumableArray(melodySettings.sequence.steps2);\n\n            randomizedSequence.forEach(function (step, i) {\n              var newStep = Object.assign({}, step);\n              newStep.noteName = notes[i];\n              melodyPart.add(newStep);\n            });\n          } else {\n            melodySettings.sequence.steps2.forEach(function (step, i) {\n              melodyPart.add(step);\n            });\n          }\n        } else if (measure == melodyChangeMeasure + 1 || measure - squaresPassed * melodyChangeMeasure == 1) {\n          console.log(\"change back\");\n          melodyPart.clear();\n          melodySettings.sequence.steps1.forEach(function (step, i) {\n            melodyPart.add(step);\n          });\n        }\n      }\n    };\n\n    _this.handleTransportChange = function (property, value) {\n      var bpm = _this.state.bpm;\n\n      switch (property) {\n        case \"play\":\n          Tone.Transport.start();\n          Tone.Transport.scheduleRepeat(_this.nextMeasure, \"1m\");\n\n          _this.setState({\n            isStarted: true\n          });\n\n          break;\n\n        case \"bpm\":\n          Tone.Transport.bpm.value = value;\n\n          _this.setState({\n            bpm: value\n          });\n\n          break;\n      }\n    };\n\n    _this.handleValueChange = function (instrumentName, property, value) {\n      var _this$state3 = _this.state,\n          bassSettings = _this$state3.bassSettings,\n          melodySettings = _this$state3.melodySettings;\n      var instrument;\n      var pingPongDelay;\n      var chorus;\n      var settings;\n\n      if (instrumentName === \"bass\") {\n        instrument = bassSynth;\n        pingPongDelay = bassPingPongDelay;\n        chorus = bassChorus;\n        settings = bassSettings;\n      } else if (instrumentName === \"melody\") {\n        instrument = melodySynth;\n        pingPongDelay = melodyPingPongDelay;\n        chorus = melodyChorus;\n        settings = melodySettings;\n      }\n\n      switch (property) {\n        case \"synthType\":\n          instrument.oscillator.type = value;\n          settings.synth.oscillator.type = value;\n          break;\n\n        case \"synthShowEnvelope\":\n          settings.synthUI.envelopeShow = value;\n          break;\n\n        case \"synthEnvelopeAttack\":\n          instrument.envelope.attack = value;\n          settings.synth.envelope.attack = value;\n          break;\n\n        case \"synthEnvelopeDecay\":\n          instrument.envelope.decay = value;\n          settings.synth.envelope.decay = value;\n          break;\n\n        case \"synthEnvelopeSustain\":\n          instrument.envelope.sustain = value;\n          settings.synth.envelope.sustain = value;\n          break;\n\n        case \"synthEnvelopeRelease\":\n          instrument.envelope.release = value;\n          settings.synth.envelope.release = value;\n          break;\n\n        case \"pingPongDelayWet\":\n          pingPongDelay.wet.value = value;\n          settings.pingPongDelay.wet = value;\n          break;\n\n        case \"pingPongDelayDelayTime\":\n          pingPongDelay.delayTime.value = value;\n          settings.pingPongDelay.delayTime = value;\n          break;\n\n        case \"pingPongDelayMaxDelayTime\":\n          pingPongDelay.maxDelayTime = value;\n          settings.pingPongDelay.maxDelayTime = value;\n          break;\n\n        case \"chorusWet\":\n          chorus.wet.value = value;\n          settings.chorus.wet = value;\n          break;\n\n        case \"chorusType\":\n          chorus.type = value;\n          settings.chorus.type = value;\n          break;\n\n        case \"chorusFrequency\":\n          chorus.frequency.value = value;\n          settings.chorus.frequency = value;\n          break;\n\n        case \"chorusDelayTime\":\n          chorus.delayTime = value;\n          settings.chorus.delayTime = value;\n          break;\n\n        case \"chorusDepth\":\n          chorus.depth = value;\n          settings.chorus.depth = value;\n          break;\n\n        case \"chorusSpread\":\n          chorus.spread = value;\n          settings.chorus.spread = value;\n          break;\n      }\n\n      _this.setState({\n        bassSettings: bassSettings,\n        melodySettings: melodySettings\n      });\n    };\n\n    _this.handleMelodySequenceChange = function (property, value) {\n      var melodySettings = _this.state.melodySettings;\n      var steps = melodySettings.sequence[value];\n      melodySettings.sequence.current = value;\n      melodyPart.clear();\n      steps.forEach(function (step, i) {\n        melodyPart.add(step);\n      });\n\n      _this.setState({\n        melodySettings: melodySettings\n      });\n    };\n\n    _this.handleDrumsValueChange = function (property, value) {\n      var drumsSettings = _this.state.drumsSettings;\n\n      if (property === \"channelVolume\") {\n        samplerChannel.volume.value = value;\n        drumsSettings.channel.volume = value;\n      } else if (property === \"channelMute\") {\n        console.log(\"=====BEFORE=====\", drumsSettings.channel.mute, samplerChannel.mute, drumsSettings.channel.mute, samplerChannel);\n        var mute = !drumsSettings.channel.mute;\n        samplerChannel.mute = mute;\n        drumsSettings.channel.mute = mute;\n        console.log(\"=====AFTER=====\", mute, samplerChannel.mute, drumsSettings.channel.mute, samplerChannel);\n      } else if (property === \"channelPan\") {\n        samplerChannel.pan.value = value;\n        drumsSettings.channel.pan = value;\n      }\n\n      _this.setState({\n        drumsSettings: drumsSettings\n      });\n    };\n\n    _this.handleToggleUIShow = function () {\n      var isUIShown = _this.state.isUIShown;\n\n      _this.setState({\n        isUIShown: !isUIShown\n      });\n    };\n\n    _this.renderStartButton = function () {\n      return /*#__PURE__*/React.createElement(SC_Button, {\n        text: \"start e-pressure\",\n        handleClick: _this.handleStart,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 7\n        }\n      });\n    };\n\n    _this.renderShowHideButton = function () {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"toggleUIButton\",\n        onClick: _this.handleToggleUIShow,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 7\n        }\n      }, \"Show/Hide UI\");\n    };\n\n    _this.renderUI = function () {\n      var _this$state4 = _this.state,\n          bpm = _this$state4.bpm,\n          melodyChangeMeasureSelect = _this$state4.melodyChangeMeasureSelect,\n          melodyChangeMeasure = _this$state4.melodyChangeMeasure,\n          melodyChangeRandom = _this$state4.melodyChangeRandom,\n          melodyChange = _this$state4.melodyChange,\n          bassSettings = _this$state4.bassSettings,\n          melodySettings = _this$state4.melodySettings,\n          drumsSettings = _this$state4.drumsSettings;\n      var melodyChangeButtonText = melodyChange ? \"On\" : \"Off\";\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"instrumentUI\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"column\",\n        id: \"1\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 9\n        }\n      }, \"emotional pressure synth\"), /*#__PURE__*/React.createElement(SC_Slider, {\n        name: \"speed of thought\\u044B\",\n        min: 0,\n        max: 300,\n        step: 1,\n        value: bpm,\n        property: \"bpm\",\n        handleChange: function handleChange(property, value) {\n          _this.handleTransportChange(property, value);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(SC_ToggleButtonSet, {\n        name: \"Stress steps\",\n        options: [\"steps1\", \"steps2\"],\n        value: melodySettings.sequence.current,\n        property: \"melodySequence\",\n        handleChange: _this.handleMelodySequenceChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 9\n        }\n      }, \"1st mind\"), /*#__PURE__*/React.createElement(ToneSynth, {\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 9\n        }\n      }, \"PingPongDelayEffect\"), /*#__PURE__*/React.createElement(PingPongDelayEffect, {\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 9\n        }\n      }, \"ChorusEffect\"), /*#__PURE__*/React.createElement(ChorusEffect, {\n        instrumentName: \"melody\",\n        settings: melodySettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 9\n        }\n      }, \"headache\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drumsBntSet\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(SC_Button, {\n        text: \"pw\",\n        handleClick: function handleClick() {\n          sampler.triggerAttackRelease(\"A3\", \"1n\");\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(SC_Button, {\n        text: \"turu-turu\",\n        handleClick: function handleClick() {\n          sampler.triggerAttackRelease(\"A5\", \"1n\");\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(SC_Button, {\n        text: \"puru-puru-puru\",\n        handleClick: function handleClick() {\n          sampler.triggerAttackRelease(\"A6\", \"1n\");\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(SC_Button, {\n        text: \"ta-ta-taa\",\n        handleClick: function handleClick() {\n          sampler.triggerAttackRelease(\"B1\", \"1m\");\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 11\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"column\",\n        id: \"2\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"withoutOutline\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 9\n        }\n      }, \"*\"), /*#__PURE__*/React.createElement(Select, {\n        name: \"Expressions\",\n        options: [2, 4, 8, 16, 32],\n        isOpened: melodyChangeMeasureSelect,\n        value: melodyChangeMeasure,\n        property: \"\",\n        handleMelodyChangeMeasureSelectOpen: _this.handleMelodyChangeMeasureSelectOpen,\n        handleChange: _this.handleMelodyChangeMeasure,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(SC_ToggleButton, {\n        text: melodyChangeButtonText,\n        isOn: melodyChange,\n        handleClick: _this.handleMelodyChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(SC_ToggleButton, {\n        text: \"Random\",\n        isOn: melodyChangeRandom,\n        handleClick: _this.handleMelodyChangeRandom,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"asterBlock\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 9\n        }\n      }, \"2ns mind\"), /*#__PURE__*/React.createElement(ToneSynth, {\n        instrumentName: \"bass\",\n        settings: bassSettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 9\n        }\n      }, \"PingPongDelayEffect\"), /*#__PURE__*/React.createElement(PingPongDelayEffect, {\n        instrumentName: \"bass\",\n        settings: bassSettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 9\n        }\n      }, \"ChorusEffect\"), /*#__PURE__*/React.createElement(ChorusEffect, {\n        instrumentName: \"bass\",\n        settings: bassSettings,\n        handleValueChange: _this.handleValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"drumsBox\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Channel, {\n        settings: drumsSettings,\n        handleValueChange: _this.handleDrumsValueChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 11\n        }\n      }))));\n    };\n\n    _this.state = {\n      isStarted: false,\n      isUIShown: true,\n      bpm: 80,\n      melodyChangeMeasureSelect: false,\n      melodyChangeMeasure: 8,\n      melodyChangeRandom: false,\n      melodyChange: false,\n      random: false,\n      bassSettings: bassSettings,\n      melodySettings: melodySettings,\n      drumsSettings: drumsSettings\n    };\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener(\"keydown\", this.handleKeydown);\n      document.addEventListener(\"click\", this.handleMelodyChangeMeasureSelectClose);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state5 = this.state,\n          isStarted = _this$state5.isStarted,\n          isUIShown = _this$state5.isUIShown;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 7\n        }\n      }, isStarted ? this.renderShowHideButton() : this.renderStartButton(), isUIShown ? this.renderUI() : \"\");\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport { Container as default };","map":{"version":3,"names":["Tone","React","Component","bassSettings","melodySettings","drumsSettings","ToneSynth","PingPongDelayEffect","ChorusEffect","Channel","SC_ToggleButtonSet","SC_ToggleButton","SC_Button","SC_Slider","SC_Knob","Surface","Select","bassSynth","bassChorus","bassPingPongDelay","bassPart","melodySynth","melodyChorus","melodyPingPongDelay","melodyPart","sampler","samplerChannel","Container","props","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","handleMelodyChangeMeasureSelectClose","e","console","log","target","classList","setState","melodyChangeMeasureSelect","handleMelodyChangeMeasureSelectOpen","handleMelodyChangeMeasure","property","value","melodyChangeMeasure","handleMelodyChangeRandom","melodyChangeRandom","state","handleMelodyChange","melodyChange","handleKeydown","key","code","keyCode","handleMelodySequenceChange","triggerAttackRelease","handleStart","Synth","synth","Chorus","chorus","start","PingPongDelay","pingPongDelay","toDestination","chain","Part","time","note","noteName","duration","velocity","sequence","steps","loopEnd","loop","current","Sampler","urls","A1","A2","A3","A4","A5","A6","B1","baseUrl","channel","drumsPart","handleTransportChange","nextMeasure","position","Transport","regexBefore","measure","parseInt","match","squaresPassed","clear","notes","steps2","forEach","item","i","push","randomizedSequence","step","newStep","Object","assign","add","steps1","bpm","scheduleRepeat","isStarted","handleValueChange","instrumentName","instrument","settings","oscillator","type","synthUI","envelopeShow","envelope","attack","decay","sustain","release","wet","delayTime","maxDelayTime","frequency","depth","spread","handleDrumsValueChange","volume","mute","pan","handleToggleUIShow","isUIShown","renderStartButton","renderShowHideButton","renderUI","melodyChangeButtonText","document","addEventListener"],"sources":["/Users/polinamazitova/Documents/GitHub/ADC-Synth-1stModule/app/javascript/prototypes/prototype_20/Container.jsx"],"sourcesContent":["import * as Tone from \"tone\";\nimport React, { Component } from \"react\";\n\nimport * as bassSettings from \"./tunes/bass.js\";\nimport * as melodySettings from \"./tunes/melody.js\";\nimport * as drumsSettings from \"./tunes/drums.js\";\n\nimport ToneSynth from \"./modules/ToneSynth.jsx\";\nimport PingPongDelayEffect from \"./modules/PingPongDelayEffect.jsx\";\nimport ChorusEffect from \"./modules/ChorusEffect.jsx\";\nimport Channel from \"./modules/Channel.jsx\";\n\nimport SC_ToggleButtonSet from \"./components/SC_ToggleButtonSet.jsx\";\nimport SC_ToggleButton from \"./components/SC_ToggleButton\";\nimport SC_Button from \"./components/SC_Button\";\nimport SC_Slider from \"./components/SC_Slider\";\nimport SC_Knob from \"./components/SC_Knob\";\nimport Surface from \"./components/Surface\";\nimport Select from \"./components/Select\";\n\nlet bassSynth;\nlet bassChorus;\nlet bassPingPongDelay;\nlet bassPart;\n\nlet melodySynth;\nlet melodyChorus;\nlet melodyPingPongDelay;\nlet melodyPart;\n\nlet sampler;\nlet samplerChannel;\n\nexport default class Container extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isStarted: false,\n      isUIShown: true,\n      bpm: 80,\n      melodyChangeMeasureSelect: false,\n      melodyChangeMeasure: 8,\n      melodyChangeRandom: false,\n      melodyChange: false,\n      random: false,\n      bassSettings,\n      melodySettings,\n      drumsSettings,\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeydown);\n\n    document.addEventListener(\n      \"click\",\n      this.handleMelodyChangeMeasureSelectClose\n    );\n  }\n\n  shuffle = (array) => {\n    let currentIndex = array.length,\n      randomIndex;\n\n    // While there remain elements to shuffle.\n    while (currentIndex != 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      // prettier-ignore\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  };\n\n  handleMelodyChangeMeasureSelectClose = (e) => {\n    console.log(\"close\", e.target.classList[0]);\n\n    if (e.target.classList[0] != \"currentValue\") {\n      this.setState({\n        melodyChangeMeasureSelect: false,\n      });\n    }\n  };\n\n  handleMelodyChangeMeasureSelectOpen = () => {\n    console.log(\"click\");\n\n    this.setState({\n      melodyChangeMeasureSelect: true,\n    });\n  };\n\n  handleMelodyChangeMeasure = (property, value) => {\n    this.setState({\n      melodyChangeMeasureSelect: false,\n      melodyChangeMeasure: value,\n    });\n  };\n\n  handleMelodyChangeRandom = () => {\n    const { melodyChangeRandom } = this.state;\n\n    this.setState({\n      melodyChangeRandom: !melodyChangeRandom,\n    });\n  };\n\n  handleMelodyChange = () => {\n    const { melodyChange } = this.state;\n\n    this.setState({\n      melodyChange: !melodyChange,\n    });\n  };\n\n  handleKeydown = (e) => {\n    console.log(e.key, e.code, e.keyCode);\n\n    switch (e.keyCode) {\n      case 49:\n        this.handleMelodySequenceChange(\"\", \"steps1\");\n        break;\n      case 50:\n        this.handleMelodySequenceChange(\"\", \"steps2\");\n        break;\n      case 81:\n        sampler.triggerAttackRelease(\"A3\", \"1n\");\n        break;\n    }\n  };\n\n  handleStart = () => {\n    const { bassSettings, melodySettings, drumsSettings } = this.state;\n\n    //\n    //\n    bassSynth = new Tone.Synth(bassSettings.synth);\n    bassChorus = new Tone.Chorus(bassSettings.chorus).start();\n\n    bassPingPongDelay = new Tone.PingPongDelay(\n      bassSettings.pingPongDelay\n    ).toDestination();\n\n    bassSynth.chain(bassChorus, bassPingPongDelay);\n\n    const bassPart = new Tone.Part((time, note) => {\n      bassSynth.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      );\n    }, bassSettings.sequence.steps).start(0);\n\n    bassPart.loopEnd = bassSettings.sequence.duration;\n    bassPart.loop = bassSettings.sequence.loop;\n    //\n    //\n    melodySynth = new Tone.Synth(melodySettings.synth);\n    melodyChorus = new Tone.Chorus(melodySettings.chorus).start();\n\n    melodyPingPongDelay = new Tone.PingPongDelay(\n      melodySettings.pingPongDelay\n    ).toDestination();\n\n    melodySynth.chain(melodyChorus, melodyPingPongDelay);\n\n    melodyPart = new Tone.Part((time, note) => {\n      melodySynth.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      );\n    }, melodySettings.sequence[melodySettings.sequence.current]).start(0);\n\n    melodyPart.loopEnd = melodySettings.sequence.duration;\n    melodyPart.loop = melodySettings.sequence.loop;\n    //\n    //\n    sampler = new Tone.Sampler({\n      urls: {\n        A1: \"shkshkshk.wav\",\n        A2: \"px.wav\",\n        A3: \"pau.mp3\",\n        A4: \"WA_SineDroop_Arp-160-C.wav\",\n        A5: \"WA_Wobbulous_Arp-160-A.wav\",\n        A6: \"WA_Flauter-160-C.wav\",\n        B1: \"klee-ta-ta-ta-and-woo.mp3\"\n\n      },\n      baseUrl: \"http://localhost:3000/samples/\",\n      // onload: () => {\n      //   sampler.triggerAttackRelease(['A1', 'A2', 'A1', 'A2'], 0.5)\n      // }\n    });\n\n    samplerChannel = new Tone.Channel(drumsSettings.channel).toDestination();\n\n    sampler.chain(samplerChannel);\n\n    const drumsPart = new Tone.Part((time, note) => {\n      sampler.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      );\n    }, drumsSettings.sequence.steps).start(0);\n\n    drumsPart.loopEnd = drumsSettings.sequence.duration;\n    drumsPart.loop = drumsSettings.sequence.loop;\n\n    this.handleTransportChange(\"play\", true);\n  };\n\n  nextMeasure = () => {\n    const {\n      melodyChangeMeasure,\n      melodyChangeRandom,\n      melodyChange,\n    } = this.state;\n\n    if (melodyChange) {\n      const position = Tone.Transport.position;\n      const regexBefore = /([\\w]+)/;\n      let measure = parseInt(position.match(regexBefore)[1]) + 1;\n      console.log(\"next measure\", measure);\n\n      const squaresPassed = Math.floor(measure / melodyChangeMeasure);\n\n      if (\n        measure == melodyChangeMeasure ||\n        measure - squaresPassed * melodyChangeMeasure == 0\n      ) {\n        console.log(\"change\");\n        melodyPart.clear();\n\n        if (melodyChangeRandom) {\n          console.log(\"random\");\n\n          let notes = [];\n\n          melodySettings.sequence.steps2.forEach((item, i) => {\n            notes.push(item.noteName);\n          });\n\n          notes = this.shuffle(notes);\n\n          let randomizedSequence = [...melodySettings.sequence.steps2];\n\n          randomizedSequence.forEach((step, i) => {\n            let newStep = Object.assign({}, step);\n            newStep.noteName = notes[i];\n            melodyPart.add(newStep);\n          });\n        } else {\n          melodySettings.sequence.steps2.forEach((step, i) => {\n            melodyPart.add(step);\n          });\n        }\n      } else if (\n        measure == melodyChangeMeasure + 1 ||\n        measure - squaresPassed * melodyChangeMeasure == 1\n      ) {\n        console.log(\"change back\");\n        melodyPart.clear();\n\n        melodySettings.sequence.steps1.forEach((step, i) => {\n          melodyPart.add(step);\n        });\n      }\n    }\n  };\n\n  handleTransportChange = (property, value) => {\n    const { bpm } = this.state;\n\n    switch (property) {\n      case \"play\":\n        Tone.Transport.start();\n        Tone.Transport.scheduleRepeat(this.nextMeasure, \"1m\");\n\n        this.setState({\n          isStarted: true,\n        });\n        break;\n      case \"bpm\":\n        Tone.Transport.bpm.value = value;\n\n        this.setState({\n          bpm: value,\n        });\n        break;\n    }\n  };\n\n  handleValueChange = (instrumentName, property, value) => {\n    const { bassSettings, melodySettings } = this.state;\n\n    let instrument;\n    let pingPongDelay;\n    let chorus;\n    let settings;\n\n    if (instrumentName === \"bass\") {\n      instrument = bassSynth;\n      pingPongDelay = bassPingPongDelay;\n      chorus = bassChorus;\n      settings = bassSettings;\n    } else if (instrumentName === \"melody\") {\n      instrument = melodySynth;\n      pingPongDelay = melodyPingPongDelay;\n      chorus = melodyChorus;\n      settings = melodySettings;\n    }\n\n    switch (property) {\n      case \"synthType\":\n        instrument.oscillator.type = value;\n        settings.synth.oscillator.type = value;\n        break;\n      case \"synthShowEnvelope\":\n        settings.synthUI.envelopeShow = value;\n        break;\n      case \"synthEnvelopeAttack\":\n        instrument.envelope.attack = value;\n        settings.synth.envelope.attack = value;\n        break;\n      case \"synthEnvelopeDecay\":\n        instrument.envelope.decay = value;\n        settings.synth.envelope.decay = value;\n        break;\n      case \"synthEnvelopeSustain\":\n        instrument.envelope.sustain = value;\n        settings.synth.envelope.sustain = value;\n        break;\n      case \"synthEnvelopeRelease\":\n        instrument.envelope.release = value;\n        settings.synth.envelope.release = value;\n        break;\n      case \"pingPongDelayWet\":\n        pingPongDelay.wet.value = value;\n        settings.pingPongDelay.wet = value;\n        break;\n      case \"pingPongDelayDelayTime\":\n        pingPongDelay.delayTime.value = value;\n        settings.pingPongDelay.delayTime = value;\n        break;\n      case \"pingPongDelayMaxDelayTime\":\n        pingPongDelay.maxDelayTime = value;\n        settings.pingPongDelay.maxDelayTime = value;\n        break;\n      case \"chorusWet\":\n        chorus.wet.value = value;\n        settings.chorus.wet = value;\n        break;\n      case \"chorusType\":\n        chorus.type = value;\n        settings.chorus.type = value;\n        break;\n      case \"chorusFrequency\":\n        chorus.frequency.value = value;\n        settings.chorus.frequency = value;\n        break;\n      case \"chorusDelayTime\":\n        chorus.delayTime = value;\n        settings.chorus.delayTime = value;\n        break;\n      case \"chorusDepth\":\n        chorus.depth = value;\n        settings.chorus.depth = value;\n        break;\n      case \"chorusSpread\":\n        chorus.spread = value;\n        settings.chorus.spread = value;\n        break;\n    }\n\n    this.setState({\n      bassSettings,\n      melodySettings,\n    });\n  };\n\n  handleMelodySequenceChange = (property, value) => {\n    const { melodySettings } = this.state;\n    const steps = melodySettings.sequence[value];\n\n    melodySettings.sequence.current = value;\n    melodyPart.clear();\n\n    steps.forEach((step, i) => {\n      melodyPart.add(step);\n    });\n\n    this.setState({\n      melodySettings,\n    });\n  };\n\n  handleDrumsValueChange = (property, value) => {\n    const { drumsSettings } = this.state;\n\n    if (property === \"channelVolume\") {\n      samplerChannel.volume.value = value;\n      drumsSettings.channel.volume = value;\n    } else if (property === \"channelMute\") {\n      console.log(\n        \"=====BEFORE=====\",\n        drumsSettings.channel.mute,\n        samplerChannel.mute,\n        drumsSettings.channel.mute,\n        samplerChannel\n      );\n\n      const mute = !drumsSettings.channel.mute;\n      samplerChannel.mute = mute;\n      drumsSettings.channel.mute = mute;\n\n      console.log(\n        \"=====AFTER=====\",\n        mute,\n        samplerChannel.mute,\n        drumsSettings.channel.mute,\n        samplerChannel\n      );\n    } else if (property === \"channelPan\") {\n      samplerChannel.pan.value = value;\n      drumsSettings.channel.pan = value;\n    }\n\n    this.setState({\n      drumsSettings,\n    });\n  };\n\n  handleToggleUIShow = () => {\n    const { isUIShown } = this.state;\n\n    this.setState({\n      isUIShown: !isUIShown,\n    });\n  };\n\n  renderStartButton = () => {\n    return (\n      <SC_Button\n        text=\"start e-pressure\"\n        handleClick={this.handleStart}\n      />\n    );\n  };\n\n  renderShowHideButton = () => {\n    return (\n      <div className=\"toggleUIButton\" onClick={this.handleToggleUIShow}>\n        Show/Hide UI\n      </div>\n    );\n  };\n\n  renderUI = () => {\n    const {\n      bpm,\n      melodyChangeMeasureSelect,\n      melodyChangeMeasure,\n      melodyChangeRandom,\n      melodyChange,\n      bassSettings,\n      melodySettings,\n      drumsSettings,\n    } = this.state;\n\n    const melodyChangeButtonText = melodyChange ? \"On\" : \"Off\";\n\n    return (\n      <div className=\"instrumentUI\">\n        <div className='column' id='1'>\n\n        <h2>emotional pressure synth</h2>\n\n        <SC_Slider\n          name=\"speed of thoughtы\"\n          min={0}\n          max={300}\n          step={1}\n          value={bpm}\n          property=\"bpm\"\n          handleChange={(property, value) => {\n            this.handleTransportChange(property, value);\n          }}\n        />\n        \n        <SC_ToggleButtonSet\n          name=\"Stress steps\"\n          options={[\"steps1\", \"steps2\"]}\n          value={melodySettings.sequence.current}\n          property=\"melodySequence\"\n          handleChange={this.handleMelodySequenceChange}\n        />\n\n\n        <h2>1st mind</h2>\n        <ToneSynth\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n        <h2>PingPongDelayEffect</h2>\n\n        <PingPongDelayEffect\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <h2>ChorusEffect</h2>\n        <ChorusEffect\n          instrumentName=\"melody\"\n          settings={melodySettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <h2>headache</h2>\n        <div className=\"drumsBntSet\">\n\n          <SC_Button\n                    text=\"pw\"\n                    handleClick={() => {\n                      sampler.triggerAttackRelease(\"A3\", \"1n\");\n                    }}\n                  />\n          <SC_Button\n                    text=\"turu-turu\"\n                    handleClick={() => {\n                      sampler.triggerAttackRelease(\"A5\", \"1n\");\n                    }}\n                  />\n          <SC_Button\n                    text=\"puru-puru-puru\"\n                    handleClick={() => {\n                      sampler.triggerAttackRelease(\"A6\", \"1n\");\n                    }}\n                  />\n          <SC_Button\n                    text=\"ta-ta-taa\"\n                    handleClick={() => {\n                      sampler.triggerAttackRelease(\"B1\", \"1m\");\n                    }}\n                  />\n        </div>\n        </div>\n\n        <div className='column' id='2'>\n        <h2 className= \"withoutOutline\">*</h2>\n\n        <Select\n          name=\"Expressions\"\n          options={[2, 4, 8, 16, 32]}\n          isOpened={melodyChangeMeasureSelect}\n          value={melodyChangeMeasure}\n          property=\"\"\n          handleMelodyChangeMeasureSelectOpen={\n            this.handleMelodyChangeMeasureSelectOpen\n          }\n          handleChange={this.handleMelodyChangeMeasure}\n        />\n        <div className='row'>\n\n        <SC_ToggleButton\n          text={melodyChangeButtonText}\n          isOn={melodyChange}\n          handleClick={this.handleMelodyChange}\n        />\n        <SC_ToggleButton\n          text=\"Random\"\n          isOn={melodyChangeRandom}\n          handleClick={this.handleMelodyChangeRandom}\n        />\n        </div>\n        <div className='asterBlock'></div>\n\n        \n        <h2>2ns mind</h2>\n        <ToneSynth\n          instrumentName=\"bass\"\n          settings={bassSettings}\n          handleValueChange={this.handleValueChange}\n        />\n        <h2>PingPongDelayEffect</h2>\n        <PingPongDelayEffect\n          instrumentName=\"bass\"\n          settings={bassSettings}\n          handleValueChange={this.handleValueChange}\n        />\n        <h2>ChorusEffect</h2>\n        <ChorusEffect\n          instrumentName=\"bass\"\n          settings={bassSettings}\n          handleValueChange={this.handleValueChange}\n        />\n\n        <div className=\"drumsBox\">\n          <Channel\n            settings={drumsSettings}\n            handleValueChange={this.handleDrumsValueChange}\n          />\n        </div>\n        </div>\n\n      </div>\n    );\n  };\n\n  render() {\n    const { isStarted, isUIShown } = this.state;\n\n    return (\n      <div className=\"Container\">\n        {isStarted ? this.renderShowHideButton() : this.renderStartButton()}\n        {isUIShown ? this.renderUI() : \"\"}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}